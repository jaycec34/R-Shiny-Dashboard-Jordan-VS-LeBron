color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
net_profit
}
#net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
net_profit <- 0
for (i in 1:10) {
color <- RouletteSpin(1) |> select(color) |> pull()
print(paste("spin ",i, " is ", color, sep = ''))
if (color == "red") {
net_profit <- net_profit + 1
} else
net_profit <- net_profit - 1
}
net_profit
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
#| eval: FALSE
Candy <- function(num.candy){
outcome <- tibble(candy=c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1,,num.candy,replace=T)])
}
#| eval: FALSE
Candy <- function(num.candy){
outcome <- tibble(candy=c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(4,num.candy,replace=T)])
}
#| eval: FALSE
Candy <- function(num.candy){
outcome <- tibble(candy=c('Reeses', 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(4,num.candy,replace=T)])
}
#| eval: FALSE
Candy <- function(num.candy){
outcome <- tibble(candy=c('Reeses', 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(4,num.candy,replace=T),])
}
#| eval: FALSE
Candy <- function(num.candy){
outcome <- tibble(candy=c('Reeses', 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4,num.candy,replace=T),])
}
#| eval: FALSE
CandyDraw <- function(num.candy) {
# function to simulate drawing candies
# ARGS: number of candies to draw
# RETURNS: list of candies drawn
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(4)
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(4)
CandyDraw(1)
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(10)
CandyDraw(1)
#/could put this in the function instead
sample(c("Reese's", 'Snickers', 'm&ms', 'KitKat'),1)
#| eval: true
CandyDraw <- function(num.candy) {
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(10)
CandyDraw(5)
CandyDraw(1)
#/could put this in the function instead
sample(c("Reese's", 'Snickers', 'm&ms', 'KitKat'),1)
#| eval: true
CandyDraw <- function(num.candy) {
# a function to randomly select options of these 4 candies.
# Args: num.candy - the number of candies selected
#Returns: vector of candy bar names with length equal to num.candy
if(!is.numeric(num.candy)) {
print("enter a number of candies")
}
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(10)
CandyDraw('one')
#| eval: true
CandyDraw <- function(num.candy) {
# a function to randomly select options of these 4 candies.
# Args: num.candy - the number of candies selected
#Returns: vector of candy bar names with length equal to num.candy
if(!is.numeric(num.candy)) {
stop("enter a number of candies")
}
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(10)
CandyDraw('one')
#| eval: true
CandyDraw <- function(num.candy) {
# a function to randomly select options of these 4 candies.
# Args: num.candy - the number of candies selected
#Returns: vector of candy bar names with length equal to num.candy
if(!is.numeric(num.candy)) {
stop("enter a number of candies")
}
outcome <- tibble(candy = c("Reese's", 'Snickers', 'm&ms', 'KitKat'))
return(outcome[sample(1:4, num.candy, replace = TRUE), ])
}
CandyDraw(10)
CandyDraw('one')
num_trips <- 1000
num_pb <- rep(0,num_trips)
for (trip in 1:num_trips) {
num_pb[trip] <- sum(CandyDraw(10) == "Reese's")
}
library(devtools)
install.packages("devtools")
library(devtools)
create_package('STAT408')
library(STAT408)
get_candy(5)
?get_candy()
?get_candy()
?get_candy()
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
?get_candy()
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
?get_candy()
?get_candy
library(STAT408)
get_candy(5)
?get_candy()
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
?get_candy
library(STAT408)
get_candy(5)
?get_candy
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
get_candy(5)
library(STAT408)
?get_candy
library(STAT408)
get_candy(5)
detach(STAT408)
detach("package:STAT408", unload = TRUE)
library(STAT408)
get_candy(5)
?get_candy
library(STAT408)
get_candy(5)
?get_candy
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
set.seed(11142024)
library(tidyverse)
library(earth)
data("etitanic")
titanic <- etitanic |>
mutate(survived_factor = factor(survived))
glimpse(titanic)
library(tidyverse)
library(earth)
titanic <- etitanic |>
mutate(survived_factor = factor(survived, labels = c("Did not survive", "Survived")))
# age
ggplot(titanic, aes(x = age, fill = survived_factor)) +
geom_histogram(bins = 30, position = "dodge") +
labs(title = "Survival by Age",
x = "Age",
y = "Count",
fill = "Survival Status") +
theme_minimal()
# sex
ggplot(titanic, aes(x = sex, fill = survived_factor)) +
geom_bar(position = "dodge") +
labs(title = "Survival by Sex",
x = "Sex",
y = "Count",
fill = "Survival Status") +
theme_minimal()
# pclass
ggplot(titanic, aes(x = pclass, fill = survived_factor)) +
geom_bar(position = "dodge") +
labs(title = "Survival by Passenger Class",
x = "Passenger Class",
y = "Count",
fill = "Survival Status") +
theme_minimal()
set.seed(11142024)
num_passengers <- nrow(titanic)
train_ids <- sample(1:num_passengers, size = round(num_passengers * 0.7))
train_set <- titanic |>
filter(row_number() %in% train_ids)
test_set <- titanic |>
filter(! row_number() %in% train_ids)
log_reg <- glm(survived_factor ~ age * pclass + sex,  family = binomial(link = 'logit'), data = train_set)
1 - mean(test_set$survived ==round(predict(log_reg, test_set, type="response")))
library(rpart)
library(rpart.plot)
# Fit a decision tree
tree_model <- rpart(survived_factor ~ age + pclass + sex, data = train_set, method = "class")
# Plot the decision tree
rpart.plot(tree_model)
# Predict on the test set
tree_predictions <- predict(tree_model, test_set, type = "class")
# Calculate classification error
tree_class_error <- 1 - mean(test_set$survived_factor == tree_predictions)
tree_class_error
library(rpart)
library(rpart.plot)
# Fit a decision tree
tree_model <- rpart(survived_factor ~ age + pclass + sex, data = train_set, method = "anova")
# Plot the decision tree
rpart.plot(tree_model)
# Predict on the test set
tree_predictions <- predict(tree_model, test_set, type = "class")
library(rpart)
library(rpart.plot)
# Fit a decision tree
tree_model <- rpart(survived_factor ~ age + pclass + sex, data = train_set, method = "class")
# Plot the decision tree
rpart.plot(tree_model)
# Predict on the test set
tree_predictions <- predict(tree_model, test_set, type = "class")
# Calculate classification error
tree_class_error <- 1 - mean(test_set$survived_factor == tree_predictions)
tree_class_error
library(rpart)
library(rpart.plot)
tree_model <- rpart(survived_factor ~ age + pclass + sex, data = test_set, method = "class")
rpart.plot(tree_model)
tree_predictions <- predict(tree_model, test_set, type = "class")
tree_class_error <- 1 - mean(test_set$survived_factor == tree_predictions)
tree_class_error
library(rpart)
library(rpart.plot)
tree_model <- rpart(survived_factor ~ age + pclass + sex, data = train_set, method = "class")
rpart.plot(tree_model)
tree_predictions <- predict(tree_model, test_set, type = "class")
tree_class_error <- 1 - mean(test_set$survived_factor == tree_predictions)
tree_class_error
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
shiny::runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
runApp('C:/Users/jayce/OneDrive - Montana State University/Stats 408/MjvsLJ')
